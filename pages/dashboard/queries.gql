query GET_RESERVATION($date: DateTime!) {
  getReservationByDate(date: $date) {
    startsAt
    endsAt
    property {
      name
    }
  }
}

query GET_VOUCHERS($from: DateTime!, $to: DateTime) {
  vouchers(
    where: { AND: [{ createdAt: { gte: $from } }, { createdAt: { lte: $to } }] }
  ) {
    createdAt
    bankTransaction {
      transactionId
    }
    image {
      publicUrlTransformed(transformation: { width: "120", crop: "limit" })
    }
    notes
  }
}

query CREATE_NEXT_PAYMENT_IF_DONT_EXIST($id: ID!) {
  createNextPayment(id: $id)
}

query GET_POST($id: ID!) {
  post(where: { id: $id }) {
    content {
      document
    }
    title
  }
}

query GET_REPORTS {
  reports(where: {}) {
    fecha
    reporteUrl
  }
}

query USER_EXISTS($email: String!, $phone: String!) {
  userExists(email: $email, phone: $phone)
}

query VERIFY_PHONE($code: String!) {
  verifyPhone(code: $code)
}

query PHONE_VERIFIED {
  phoneVerified
}

query IS_LOGGED {
  authenticatedItem {
    ... on User {
      id
      isAdmin
      isOwner
      needsBill
      name
      isVerified
      rfc {
        publicUrl
      }
      tenants {
        property {
          id
        }
      }
      residents {
        property {
          id
        }
      }
      owner {
        property {
          name
        }
      }
    }
  }
}

query GENERATE_PAYMENTS {
  generatePayments {
    id
  }
}

mutation LOG_IN($email: String!, $password: String!) {
  authenticateUserWithPassword(email: $email, password: $password) {
    ... on UserAuthenticationWithPasswordSuccess {
      sessionToken
      item {
        properties {
          square
          lot
        }
      }
    }
    ... on UserAuthenticationWithPasswordFailure {
      message
    }
  }
}

mutation UPDATE_PAYMENT($pId: ID!, $image: Upload) {
  updatePayment(where: { id: $pId }, data: { status: pending, image: $image }) {
    id
    status
  }
}

mutation CREATE_USER(
  $name: String!
  $phone: String!
  $email: String!
  $password: String!
  $properties: [PropertyCreateInput!]
) {
  createUser(
    data: {
      name: $name
      phone: $phone
      email: $email
      password: $password
      properties: { create: $properties }
    }
  ) {
    name
  }
}

query GET_PAYMENTS($id: ID!) {
  user(where: { id: $id }) {
    properties {
      id
      square
      lot
      name
      payments {
        id
        dueAt
        status
        dueAmount
        image {
          publicUrl
          mimetype
        }
      }
    }
  }
}

query GET_RESIDENTS_TENANTS($id: ID!) {
  property(where: { id: $id }) {
    residents(where: { isActive: { equals: true } }) {
      id
      name
      phone
    }
    tenants(where: { isActive: { equals: true } }) {
      id
      name
      phone
      status
      address
      user {
        properties {
          residents(where: { isActive: { equals: true } }) {
            id
            name
            phone
          }
        }
      }
    }
  }
}

query GET_RESIDENTS_BY_TENANT($id: ID!) {
  property(where: { id: $id }) {
    name
    residents(where: { isActive: { equals: true } }) {
      id
      name
      phone
    }
  }
}

mutation CREATE_RESIDENT(
  $name: String!
  $phone: String!
  $email: String!
  $password: String!
  $properties: ID
) {
  createResident(
    data: {
      name: $name
      phone: $phone
      properties: { connect: { id: $properties } }
      user: {
        create: {
          name: $name
          phone: $phone
          email: $email
          password: $password
          properties: { connect: { id: $properties } }
        }
      }
    }
  ) {
    id
    name
  }
}
mutation UPDATE_RESIDENT(
  $id: ID!
  $name: String
  $phone: String
  $isActive: Boolean
) {
  updateResident(
    where: { id: $id }
    data: { name: $name, phone: $phone, isActive: $isActive }
  ) {
    id
    name
  }
}
mutation CREATE_TENANT(
  $name: String
  $phone: String
  $email: String
  $password: String
  $address: String
  $status: String
  $properties: ID
) {
  createTenant(
    data: {
      name: $name
      phone: $phone
      address: $address
      status: $status
      properties: { connect: { id: $properties } }
      user: {
        create: {
          name: $name
          phone: $phone
          email: $email
          password: $password
          properties: { connect: { id: $properties } }
        }
      }
    }
  ) {
    id
    name
  }
}
mutation UPDATE_TENANT(
  $id: ID
  $name: String
  $phone: String
  $address: String
  $status: String
  $isActive: Boolean
) {
  updateTenant(
    where: { id: $id }
    data: {
      name: $name
      phone: $phone
      isActive: $isActive
      address: $address
      status: $status
    }
  ) {
    id
    name
  }
}

mutation LOG_OUT {
  endSession
}
